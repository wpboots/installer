<?php

namespace Boots\Installer;

/**
 * This file is part of the Boots\Installer package.
 *
 * @package    Boots\Installer
 * @subpackage ExtensionInstaller
 * @author     Kamal Khan <shout@bhittani.com>
 * @version    1.x
 * @see        http://wpboots.com
 * @link       https://github.com/wpboots/installer
 * @copyright  2014-2017 Kamal Khan
 * @license    https://github.com/wpboots/installer/blob/master/LICENSE
 */

use PhpParser\Error;
use PhpParser\NodeTraverser;
use PhpParser\ParserFactory;
use Composer\Package\PackageInterface;
use PhpParser\NodeVisitor\NameResolver;
use Composer\Installer\LibraryInstaller;
use Bhittani\PhpParser\AppendSuffixVisitor;
use PhpParser\PrettyPrinter\Standard as PhpPrinter;
use Composer\Repository\InstalledRepositoryInterface;

/**
 * @package Boots\Installer
 * @subpackage ExtensionInstaller
 */
class ExtensionInstaller extends LibraryInstaller
{
    /**
     * Extension slug (will be set dynamically for each extension).
     * @var string
     */
    protected $extSlug;

    /**
     * Extension prefix.
     * @var string
     */
    protected $extPrefix = 'boots/extension';

    /**
     * Extension type.
     * @var string
     */
    protected $extType = 'boots-extension';

    /**
     * Framework directory (relative to project).
     * @var string
     */
    protected $frameworkDir = 'boots';

    /**
     * Framework extension directory (relative to framework).
     * @var string
     */
    protected $extDir = 'extend';

    /**
     * Framework config file (relative to framework).
     * @var string
     */
    protected $configFile = 'boots.php';

    protected static function readConfig($path)
    {
        $config = [
            'version' => '',
            'autoload' => [],
            'mounted' => false,
            'extensions' => [],
        ];

        if (is_file($path)) {
            $config = require $path;
        }

        return $config;
    }

    protected static function writeConfig($path, array $config)
    {
        $contents = '<?php ' . PHP_EOL;
        $contents .= '// This file is automatically generated by the' . PHP_EOL;
        $contents .= '// boots framework and SHOULD NOT be modified directly.' . PHP_EOL;
        $contents .= 'return ' . var_export($config, true) . ';' . PHP_EOL;
        file_put_contents($path, $contents);
    }

    protected function getRootPath($path = '')
    {
        $root = dirname($this->composer->getConfig()->getConfigSource()->getName());
        return rtrim($root . '/' . trim($path, '/'), '/');
    }

    protected function getAbsolutePath(PackageInterface $package)
    {
        return $this->getRootPath() . '/' . $this->getInstallPath($package);
    }

    protected function mount(PackageInterface $package)
    {
        $path = $this->getAbsolutePath($package);
        $version = $package->getPrettyVersion();
        $autoloads = $package->getAutoload();

        $suffix = str_replace('.', '_', $version);
        $suffix = str_replace('-', '_', $suffix);
        $suffix = empty($suffix) ? '' : "_{$suffix}";

        $regexes = [];
        foreach (array_keys($autoloads['psr-4']) as $prefix) {
            $regexes['/^\\\\?' . preg_quote($prefix) . '/'] = $suffix;
        }
        $traverser = new NodeTraverser;
        $traverser->addVisitor(new AppendSuffixVisitor($suffix, $regexes));

        $printer = new PhpPrinter;
        $parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);

        foreach (array_values($autoloads['psr-4']) as $rpath) {
            $dir = $path . '/' . trim($rpath, '/');
            if (!is_dir($dir)) {
                continue;
            }
            $files = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($dir));
            $files = new \RegexIterator($files, '/\.php$/');
            foreach ($files as $file) {
                try {
                    // read the file that should be converted
                    $code = file_get_contents($file);
                    // parse
                    $stmts = $parser->parse($code);
                    // traverse
                    $stmts = $traverser->traverse($stmts);
                    // pretty print
                    $code = $printer->prettyPrintFile($stmts);
                    // write the converted file to the target directory
                    file_put_contents($file, $code . PHP_EOL);
                } catch (Error $e) {
                    echo 'Parse Error: ', $e->getMessage();
                }
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public function getInstallPath(PackageInterface $package)
    {
        $prettyName = $package->getPrettyName();

        $unwantedLength = strlen($this->extPrefix) + 1;

        $prefix = substr($prettyName, 0, $unwantedLength);
        if ($prefix !== $this->extPrefix . '-') {
            throw new \InvalidArgumentException(sprintf(
                'Unable to install extension %s. Boots extensions '
                .'should always start their package name with '
                .'"boots/extension-"',
                $prettyName
            ));
        }

        $this->extSlug = substr($prettyName, $unwantedLength);
        if (!preg_match('/^(([a-z]+-)*[a-z]+)$/', $this->extSlug)) {
            throw new \InvalidArgumentException(sprintf(
                'Unable to install extension %s. Boots extensions '
                .'should only contain lowercase alphabets and '
                .'hyphens; and should not start or end with hyphens.',
                $prettyName
            ));
        }

        return "{$this->frameworkDir}/{$this->extDir}/{$this->extSlug}";
    }

    /**
     * {@inheritDoc}
     */
    public function supports($packageType)
    {
        return $packageType === $this->extType;
    }

    /**
     * {@inheritDoc}
     */
    public function install(InstalledRepositoryInterface $repo, PackageInterface $package)
    {
        if (!$this->supports($package->getType())) {
            return parent::install($repo, $package);
        }

        $extra = $package->getExtra();

        if (!array_key_exists('class', $extra)) {
            throw new \Exception(sprintf(
                'Unable to install extension %s. Boots extensions '
                .'require an extra property of "class" '
                .'in its composer.json file.',
                $package->getPrettyName()
            ));
        }

        $path = $this->getRootPath($this->frameworkDir);
        $configPath = "{$path}/{$this->configFile}";
        if (is_file($configPath)) {
            $config = $this->readConfig($configPath);
        }

        parent::install($repo, $package);

        $this->mount($package);

        if (!isset($config)) {
            $config = $this->readConfig($configPath);
        }
        $config['extensions'][$this->extSlug] = [
            'version' => $package->getPrettyVersion(),
            'autoload' => $package->getAutoload(),
            'class' => $extra['class'],
        ];
        if (!isset($config['extensions'][$this->extSlug]['mounted'])) {
            $config['extensions'][$this->extSlug]['mounted'] = false;
        }

        $this->writeConfig($configPath, $config);
    }
}
